@function emCal($pixelBasedNum){
  @return $pixelBasedNum / $emBase * 1em;
}

@function calcDist($a_dist,$b_dist){
  @return (($a_dist / $b_dist) * 100%); 
}


@mixin opacity($opacity) {
  @if $legacy-support-for-ie6 or $legacy-support-for-ie7 or $legacy-support-for-ie8 {
    filter: unquote("progid:DXImageTransform.Microsoft.Alpha(Opacity=#{round($opacity * 100)})"); 
  }
  opacity: $opacity;

  @if $opacity == 1{
    filter: progid:DXImageTransform.Microsoft.gradient(
        startColorstr=#00FFFFFF, endColorstr=#00FFFFFF
    );
  }
}

@mixin font-smoothing($val: antialiased) {
  -webkit-font-smoothing: $val;
  -moz-font-smoothing: $val;
  -ms-font-smoothing: $val;
  -o-font-smoothing: $val;
}


//mixin
@mixin rwd($media) {
  @if $media == s {
    @media only screen and (max-width:$break-medium - 1) { @content; }
  }
  @else if $media == sp {
    @media only screen and (max-width:$break-medium - 1) and (orientation: portrait){ @content; }
  }
  @else if $media == m {
    @media only screen and (min-width: $break-medium - 1) and (max-width: $break-large - 1) { @content; }
  }
  @else if $media == mp {
    @media only screen and (min-width: $break-medium - 1) and (max-width: $break-large - 1) and (orientation: portrait){ @content; }
  }
  @else if $media == l {
     @media only screen and (min-width: $break-large - 1) { 
      @content;
    }
  }
  @else if $media == xl {
    @media only screen and (min-width: $break-xlarge) { @content; }
  }
}

//
@function em( $pixel, $font-size: $emBase, $round:false ) {
  $value: (strip-units($pixel) / strip-units($font-size)) * 1em;
  @if $round {
    @return round( $value );
  } @else {
    @return $value;
  }
}

@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}